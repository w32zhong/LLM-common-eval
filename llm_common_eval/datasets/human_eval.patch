diff --git a/human_eval/evaluate_functional_correctness.py b/human_eval/evaluate_functional_correctness.py
index 9247a68..7bea7dd 100644
--- a/human_eval/evaluate_functional_correctness.py
+++ b/human_eval/evaluate_functional_correctness.py
@@ -1,3 +1,4 @@
+import json
 import fire
 import sys
 
@@ -20,6 +21,9 @@ def entry_point(
     results = evaluate_functional_correctness(sample_file, k, n_workers, timeout, problem_file)
     print(results)
 
+    with open('results.txt', 'a') as fh:
+        fh.write(sample_file + '\t' + json.dumps(results) + '\n')
+
 
 def main():
     fire.Fire(entry_point)
diff --git a/human_eval/execution.py b/human_eval/execution.py
index bc509f5..80b57ec 100644
--- a/human_eval/execution.py
+++ b/human_eval/execution.py
@@ -19,7 +19,6 @@ def check_correctness(problem: Dict, completion: str, timeout: float,
     :param completion_id: an optional completion ID so we can match
         the results later even if execution finishes asynchronously.
     """
-
     def unsafe_execute():
 
         with create_tempdir():
@@ -45,23 +44,17 @@ def check_correctness(problem: Dict, completion: str, timeout: float,
                 exec_globals = {}
                 with swallow_io():
                     with time_limit(timeout):
-# WARNING
-# This program exists to execute untrusted model-generated code. Although
-# it is highly unlikely that model-generated code will do something overtly
-# malicious in response to this test suite, model-generated code may act
-# destructively due to a lack of model capability or alignment.
-# Users are strongly encouraged to sandbox this evaluation suite so that it 
-# does not perform destructive actions on their host or network. For more 
-# information on how OpenAI sandboxes its code, see the accompanying paper.
-# Once you have read this disclaimer and taken appropriate precautions, 
-# uncomment the following line and proceed at your own risk:
-#                         exec(check_program, exec_globals)
+                        exec(check_program, exec_globals)
                 result.append("passed")
             except TimeoutException:
                 result.append("timed out")
             except BaseException as e:
                 result.append(f"failed: {e}")
 
+            print('\033[93m', '-'*30, '\033[0m')
+            print(check_program)
+            print('\033[93m', result, '\033[0m')
+
             # Needed for cleaning up.
             shutil.rmtree = rmtree
             os.rmdir = rmdir
